// You are given an integer array nums and an integer target.

// You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

// For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
// Return the number of different expressions that you can build, which evaluates to target.

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int s = 0;
        int n = nums.size();
        for(int i=0;i<n;i++)
            s += nums[i];
        cout<<s;
        int req_s;
        if((s+target)%2!=0)
         return 0;
        else
            req_s = (s+target)/2;
        cout<<req_s;
        int dp[n+1][req_s+1];
        for(int i=0;i<n+1;i++)
            dp[i][0] = 1;
        for(int i=1;i<req_s+1;i++)
            dp[0][i] = 0;
        for(int i=1;i<n+1;i++){
            for(int j=0;j<req_s+1;j++){
                if(nums[i-1]<=j)
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n][req_s];
    }
};